

Notes
Chem Conc Engine

* Main Clock / FB
  - update interval
    - variable (sub processes) ?

* chem 
  - 2d structure but expandable to (N`d)
  - chem structure + physical map
  - periodic table  = affiliation strengths?
  
  - active sites ??

* ?? active sites  ??
  ?? reactive site representation ? O-clash ???
    OK if O never matches O .. but not accept.
    Subsite matches.. (other chems active sites)
  - AS can be ANY / ALL .. 
  - each AS has physical map

* Cells 
  -  (isolated) mix of conc's
  - expandable & nestable (organelle's vs skeletal)
  - chem process (reactions)

* chem process
  - (core) has full access to cell energy + chems
  - expander class's 
    - (size,pos) - relative to parent cell ?
    - 
  - multiple match reactants (O),(A,B,C ..)
  - chem ops on cell

* chem ops (core)
  - conditional on (A,B,C ..) / cell.energy
  - scale on (A,B,C ..) / cell.energy
  - split (ABCD)= AD+BC
  - join  (A,B,C..) = ABC.. (or ACB?)
  - endo (J)/exo (S) thermic? (energy not tempÂ’)

  
  
-----------------------------
TODO 1. chem structure
 -----------------------------
 Done
   - 2d but expandable to (N`d)
   - chem structure 
   - physical map  
    - periodic table  = affiliation strengths (for rotation)
		- rot masks
    - Base Concentration - buffer Template
    - ConcentrationVolume 
      - add/test/take chemicals
  -----------------------------------
  Later..				
	- streams based log handler  		
    - peps sharing position - with energy penalty
  -----------------------------------
  - ?? 0bX..... = 2x127 sets  (OR) 0bXX.... = 4x64 sets 
  - active elements ... 0bXXsstttt  .. match 0bYYsseett 
  - ss = match.strength = 0-3
  - eett = match. energy/temp deltas = (0-3) = { -1,0,1,2 }  
  ==================================
  - think about matches ..  
  ==================================
  - thermodynamics = energy,temp
  - conc.volume-> match.CACHE (strength,delta energy/temp)
    - clean .. check each A/B .. if not in CV then remove from cache
  - conc.root.process
    -- for all other -> conc.match

    =======================
  - conc.match (c2); (M1, M2)
    =======================
    - for each (pos,rot) = 
    - collis.map = (each cell=) empty, (exposed/active) = matched /unmatched , inactive/hidden
      - check collis, check both have active cells 
      - for each peptite 
        - peptide.match (A,B)
        - endo/exo thermic ?
        - pep match strength/energy
      - overall M1-M2 reaction  = strength, delta energy, delta temp  (cached) 
        - M1-M2 reactioe.threshold ?? (use TEMPERATURE ??)
        - eg. mole.reac.streanth = 10  (temp > -10)   
        
    =======================
  - peptide pair interacton - eg : void Molecule::testrot(void)
    =======================
  - pep reaction/interaction : activ temperature, dela enrgy, delta temp
  - activ temp (AT) = sum pep.match
  
  - ?? match pep vs code peps ??
  - multiple match reactants (O),(A,B,C ..)
    - sub (match) process..
   
 
  ============================
  - IPC / multithread
  - multi-conc or multi-vols ??
  ============================
  - shmem - pages
    - *object = *page, (OBJ) *obj
    - page.mutex / open.r/w close.r/w

  - mult-vol
  - each conc = is it own thread - and shared mem with conv.vol
  - conc = <pageitem> (page, (conc*) list.head)
  	- ie.. each ConcVol has its own r/w mutx ??
    - conc.vol commit = main shm/write
    - 
   
   
   

molecule.testrot: [0x41 0x41](A,A) =0
molecule.testrot: [0x41 0x42](A,B) =1
molecule.testrot: [0x41 0x43](A,C) =1
molecule.testrot: [0x41 0x44](A,D) =0
molecule.testrot: [0x41 0x45](A,E) =0
molecule.testrot: [0x41 0x46](A,F) =3
molecule.testrot: [0x41 0x47](A,G) =3
molecule.testrot: [0x41 0x48](A,H) =0
molecule.testrot: [0x41 0x49](A,I) =0
molecule.testrot: [0x41 0x4a](A,J) =3
molecule.testrot: [0x41 0x4b](A,K) =3
molecule.testrot: [0x41 0x4c](A,L) =0
molecule.testrot: [0x41 0x4d](A,M) =0
molecule.testrot: [0x41 0x4e](A,N) =3
molecule.testrot: [0x41 0x4f](A,O) =3
molecule.testrot: [0x41 0x50](A,P) =0
molecule.testrot: [0x41 0x51](A,Q) =0
molecule.testrot: [0x41 0x52](A,R) =1
molecule.testrot: [0x41 0x53](A,S) =1
molecule.testrot: [0x41 0x54](A,T) =0
molecule.testrot: [0x41 0x55](A,U) =0
molecule.testrot: [0x41 0x56](A,V) =2
molecule.testrot: [0x41 0x57](A,W) =2
molecule.testrot: [0x41 0x58](A,X) =0
molecule.testrot: [0x41 0x59](A,Y) =0
...
molecule.testrot: [0x41 0x41](A,A) =0
molecule.testrot: [0x42 0x41](B,A) =0
molecule.testrot: [0x43 0x41](C,A) =0
molecule.testrot: [0x44 0x41](D,A) =1
molecule.testrot: [0x45 0x41](E,A) =1
molecule.testrot: [0x46 0x41](F,A) =0
molecule.testrot: [0x47 0x41](G,A) =0
molecule.testrot: [0x48 0x41](H,A) =1
molecule.testrot: [0x49 0x41](I,A) =1
molecule.testrot: [0x4a 0x41](J,A) =1
molecule.testrot: [0x4b 0x41](K,A) =0
molecule.testrot: [0x4c 0x41](L,A) =1
molecule.testrot: [0x4d 0x41](M,A) =1
molecule.testrot: [0x4e 0x41](N,A) =1
molecule.testrot: [0x4f 0x41](O,A) =1
molecule.testrot: [0x50 0x41](P,A) =3
molecule.testrot: [0x51 0x41](Q,A) =3
molecule.testrot: [0x52 0x41](R,A) =0
molecule.testrot: [0x53 0x41](S,A) =0
molecule.testrot: [0x54 0x41](T,A) =1
molecule.testrot: [0x55 0x41](U,A) =1
molecule.testrot: [0x56 0x41](V,A) =0
molecule.testrot: [0x57 0x41](W,A) =0
molecule.testrot: [0x58 0x41](X,A) =1
molecule.testrot: [0x59 0x41](Y,A) =1
molecule.testrot: [0x5a 0x41](Z,A) =1
